group 'io.github.morichan'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'spring-boot'

// SpringBoot pluginを利用することで邪魔になったため除外
// mainClassName = 'io.github.morichan.retuss.window.RetussWindow'

sourceCompatibility = 9
tasks.withType(AbstractCompile)*.options*.encoding =
        tasks.withType(GroovyCompile)*.groovyOptions*.encoding =
                javadoc.options.encoding =
                        javadoc.options.charSet = 'UTF-8'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.+'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.+'
    }
}



repositories {
    mavenCentral()
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'antlr'

dependencies {
    antlr 'org.antlr:antlr4:4+'

    compile 'io.github.morichan:fescue:2.+'
    compile 'org.fxmisc.richtext:richtextfx:0.9.0'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.0-M1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.0-M1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.0-M1' // parameterized tests
    testCompile 'org.jmockit:jmockit:1.38'
    testCompile 'org.assertj:assertj-core:3.10.0'
    testCompile 'net.java.quickcheck:quickcheck:0.6'
    testCompile 'org.testfx:testfx-junit5:4.0.13-alpha'
    testCompile "org.testfx:openjfx-monocle:8u76-b04" // jdk-9+181 for Java 9

    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
}

ext.antlr = [destinationDir: 'src/main/java/io/github/morichan/retuss/parser/java']
generateGrammarSource {
    outputDirectory = file(new File("${antlr.destinationDir}"))
    arguments = ["-package", "io.github.morichan.retuss.parser.java", "-listener", "-no-visitor"].flatten()
}

clean {
    delete antlr.destinationDir
}

if (gradle.startParameter.taskNames.contains('uploadArchives')) {
    apply from: 'build.publish.gradle'
}



task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

jar {
    // SpringBoot pluginを利用することで邪魔になったため除外
    // manifest.attributes 'Main-Class': 'io.github.morichan.retuss.window.RetussWindow'
    jar.into('') from configurations.runtime
}



junitPlatformTest {
    jvmArgs "-Djdk.attach.allowAttachSelf"
}

test {
    systemProperties 'property': 'value'
}

// gradleでOSのアーキテクチャ情報を利用する方法を語りき, http://saygox.blogspot.com/2013/08/gradle-os.html
class OSChecker {
    static String getFamily() {
        String os=System.getProperty("os.name")
        if(os!=null && os.startsWith("Windows")) return "windows"
        else return "not windows"
    }
}
println ">>> This OS that test runs is " + OSChecker.getFamily()

// OSがWindowsでない場合はTest実行時にGUITestsタグを付けたテストスイートを実行しない
if (OSChecker.getFamily() != "windows") {
    junitPlatform.filters.tags.exclude "GUITests"
}

junitPlatform.enableStandardTestTask true

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.+'
    applyTo junitPlatformTest
}

junitPlatformTest {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}


jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main*'])
        })
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}